{"version":3,"sources":["components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","Input","Label","InputElement","Invalid","CheckoutSummary","ContactData","checkoutSummary","props","react_default","a","createElement","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","e","preventDefault","formData","input","_this","order","ingrendients","price","totalPrice","orderData","userId","onOrderBurger","token","inputChangedHandler","prop","updatedFormElement","updateObject","target","checkValidity","Object","defineProperty","setState","_this2","this","DynamicForm","keys","map","oFormKey","key","changed","objectSpread","shouldValidate","invalid","form","onSubmit","disabled","loading","Spinner","Component","connect","burger","auth","dispatch","purchaseBurger","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","Fragment","CheckoutSummary_CheckoutSummary","path","match","component","inputElement","inputClasses","push","react__WEBPACK_IMPORTED_MODULE_0___default","assign","join","onChange","bind","option","label"],"mappings":"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","file":"static/js/3.fa2d9edf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__-base64-5-\",\"Label\":\"Input__Label__-base64-5-\",\"InputElement\":\"Input__InputElement__-base64-5-\",\"Invalid\":\"Input__Invalid__-base64-5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__-base64-5-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__-base64-5-\",\"Input\":\"ContactData__Input__-base64-5-\"};","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.css\";\r\n\r\nconst checkoutSummary = props => {\r\n  return (\r\n    \r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well</h1>\r\n      <div style={{ width: \"100%\",margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        Cancel\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport { connect } from \"react-redux\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { purchaseBurger } from \"../../../store/actions/order\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your name\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"ZIP Code\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            {\r\n              value: \"fastest\",\r\n              displayValue: \"Fastest\"\r\n            },\r\n            {\r\n              value: \"cheapest\",\r\n              displayValue: \"Cheapest\"\r\n            }\r\n          ]\r\n        },\r\n        validation: {},\r\n        value: \"fastest\",\r\n        valid: true\r\n      }\r\n    },\r\n    formIsValid: false\r\n  };\r\n  orderHandler = e => {\r\n    e.preventDefault();\r\n    const formData = {};\r\n    for (const input in this.state.orderForm) {\r\n      formData[input] = this.state.orderForm[input].value;\r\n    }\r\n    const order = {\r\n      ingrendients: this.props.ingredients,\r\n      price: this.props.totalPrice,\r\n      orderData: formData,\r\n      userId: this.props.userId\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (prop, e) => {\r\n    const updatedFormElement = updateObject(this.state.orderForm[prop], {\r\n      value: e.target.value,\r\n      valid: checkValidity(\r\n        e.target.value,\r\n        this.state.orderForm[prop].validation\r\n      ),\r\n      touched: true\r\n    });\r\n\r\n    const orderForm = updateObject(this.state.orderForm, {\r\n      [prop]: updatedFormElement\r\n    })\r\n\r\n\r\n    let formIsValid = true;\r\n    for (let input in orderForm) {\r\n      formIsValid = formIsValid && orderForm[input].valid;\r\n    }\r\n\r\n    this.setState({ orderForm: orderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const orderForm = this.state.orderForm;\r\n    let DynamicForm = Object.keys(orderForm).map(oFormKey => (\r\n      <Input\r\n        key={oFormKey}\r\n        changed={this.inputChangedHandler}\r\n        elementType={orderForm[oFormKey].elementType}\r\n        elementConfig={{\r\n          ...orderForm[oFormKey].elementConfig,\r\n          ...{ key: oFormKey }\r\n        }}\r\n        touched={orderForm[oFormKey].touched}\r\n        shouldValidate={orderForm[oFormKey].validation}\r\n        invalid={!orderForm[oFormKey].valid}\r\n        value={orderForm[oFormKey].value}\r\n      />\r\n    ));\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {DynamicForm}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          Order\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter you Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  ingredients: state.burger.ingredients,\r\n  totalPrice: state.burger.totalPrice,\r\n  loading: state.order.loading,\r\n  token: state.auth.token,\r\n  userId: state.auth.userId\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onOrderBurger: (orderData, token) =>\r\n    dispatch(purchaseBurger(orderData, token))\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Checkout extends Component {\r\n\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ingredients) {\r\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n      summary = (<>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          checkoutCancelled={this.checkoutCancelledHandler}\r\n          checkoutContinued={this.checkoutContinuedHandler}\r\n          ingredients={this.props.ingredients}\r\n        />\r\n        <Route\r\n          path={this.props.match.path + \"/contact-data\"}\r\n          component={ContactData}\r\n        /></>)\r\n    }\r\n    return (\r\n      <div>\r\n        {summary}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  ingredients: state.burger.ingredients,\r\n  purchased: state.order.purchased\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from \"react\";\r\nimport classes from \"./Input.css\";\r\n\r\nconst input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          onChange={props.changed.bind(this, props.elementConfig.key)}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textArea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          onChange={props.changed.bind(this, props.elementConfig.key)}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      const options = props.elementConfig.options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.displayValue}\r\n        </option>\r\n      ));\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed.bind(this, props.elementConfig.key)}\r\n        >\r\n          {options}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed.bind(this, props.elementConfig.key)}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n"],"sourceRoot":""}